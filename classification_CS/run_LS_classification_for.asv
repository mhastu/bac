function [test_conf, test_conf_all, timepoint, calib_conf, calib_gamma, test_gamma] = run_LS_classification_for(calib_classes, test_classes, config)
%RUN_LS_CLASSIFICATION_FOR Run Leaveout-System-classification for given calibration and test classes.

    % check inputs    
    if nargin < 3
        config = struct();
    end

    C = length(calib_classes);
    if (length(test_classes) ~= C)
        error('different number of calibration and test classes');
    end
    calib_sizes = zeros(C, 3);
    for c=1:C
        calib_sizes(c, :) = size(calib_classes{c});
    end
    L = calib_sizes(1,2);  % length of each trial
    if ~all(calib_sizes(:,2) == L)
        error('all trials must have same length');
    end
    test_sizes = zeros(C, 3);
    for c=1:C
        test_sizes(c, :) = size(test_classes{c});
    end
    L = test_sizes(1,2);  % length of each trial
    if ~all(test_sizes(:,2) == L)
        error('all trials must have same length');
    end

    [classify, T, timepoint, calib_conf, calib_gamma, test_gamma] = calibrate_model(calib_classes, config);

    % test winning model for each timepoint and each participant
    fprintf('Testing winning model on each participant.\n');
    test_conf = zeros(1, size(test_classes,1));
    for p=1:size(test_classes,1)
        test_conf{p} = test_model(test_classes{p,:}, classify, T, t_indices, config);
    end
    % test winning model for each timepoint on all participants at once
    fprintf('Testing winning model on all participants at once.\n');
    test_classes_all = {...
        cat(3, test_classes{:,1,calib_s_indices}),...
        cat(3, classes{:,2,calib_s_indices}),...
        cat(3, classes{:,3,calib_s_indices})};
    test_conf_all = test_model(test_classes{p,:}, classify, T, t_indices, config);
end
